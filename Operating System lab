FCFS without Arrival time:

#include<stdio.h>
main(){
    int i,j,n,bt[10],wt[10],tat[10];
    float awt=0,atat=0;
    printf("Enter The number Process: ");
    scanf("%d",&n);
    printf("Enter the burst time: \n");
    for(i=0;i<n;i++)
    {
        printf("Process[%d]: ",i+1);
        scanf("%d",&bt[i]);
    }
    wt[0]=0;
    for(i=1;i<n;i++){
        wt[i]=0;
        for(j=0;j<i;j++){
            wt[i]+=bt[j];
        }
    }
    for(i=0;i<n;i++)
    {
        tat[i]=wt[i]+bt[i];
        awt+=wt[i];
        atat+=tat[i];
    }
    printf("Process\t\tBurst Time\t Waiting Time\tTurn Around Time\n");
    for(i=0;i<n;i++)
    {
        printf("P[%d]\t\t%d\t\t%d\t\t%d\n",i+1,bt[i],wt[i],tat[i]);
    }
    awt/=n;
    atat/=n;
    printf("\nAvarage Waiting Time: %f\n", awt);
    printf("Avarage Turnaround Time: %f", atat);
    return 0;
}





SJF(WITHOUT ARRIVAL)
#include<stdio.h>
main(){
    int i,j,n,bt[10],wt[10],tat[10],p[10],pos,temp;
    float awt=0,atat=0;
    printf("Enter The number Process: ");
    scanf("%d",&n);
    printf("Enter the burst time: \n");
    for(i=0;i<n;i++)
    {
        printf("Process[%d]: ",i+1);
        scanf("%d",&bt[i]);
        p[i]=i+1;
    }
    
    for(i=0;i<n;i++)
    {
       pos=i;
       for(j=i+1;j<n;j++){
           if(bt[j]<bt[pos]){
               pos=j;
           }
       }
       temp = bt[i];
       bt[i]=bt[pos];
       bt[pos]=temp;
       
       temp = p[i];
       p[i]=p[pos];
       p[pos]=temp;
    }
    wt[0]=0;
    for(i=1;i<n;i++){
        wt[i]=0;
        for(j=0;j<i;j++){
            wt[i]+=bt[j];
        }
    }
    for(i=0;i<n;i++)
    {
        tat[i]=wt[i]+bt[i];
        awt+=wt[i];
        atat+=tat[i];
    }
    printf("Process\t\tBurst Time\t Waiting Time\tTurn Around Time\n");
    for(i=0;i<n;i++)
    {
        printf("P[%d]\t\t%d\t\t%d\t\t%d\n",p[i],bt[i],wt[i],tat[i]);
    }
    awt/=n;
    atat/=n;
    printf("\nAvarage Waiting Time: %f\n", awt);
    printf("Avarage Turnaround Time: %f", atat);
    return 0;
}


Priority Scheduling Without Arrival Time

#include<stdio.h>
main(){
    int i,j,n,bt[10],wt[10],tat[10],p[10],pos,temp,pt[10];
    float awt=0,atat=0;
    printf("Enter The number Process: ");
    scanf("%d",&n);
    printf("Enter the burst time and priority: \n");
    for(i=0;i<n;i++)
    {
        printf("Burst time of P[%d]: ",i+1);
        scanf("%d",&bt[i]);
        printf("Priority of P[%d]: ",i+1);
        scanf("%d",&pt[i]);
        p[i]=i+1;
    }
    
    for(i=0;i<n;i++)
    {
       pos=i;
       for(j=i+1;j<n;j++){
           if(pt[j]<pt[pos]){
               pos=j;
           }
       }
       temp = bt[i];
       bt[i]=bt[pos];
       bt[pos]=temp;
       
       temp = pt[i];
       pt[i]=pt[pos];
       pt[pos]=temp;
       
       temp = p[i];
       p[i]=p[pos];
       p[pos]=temp;
    }
    wt[0]=0;
    for(i=1;i<n;i++){
        wt[i]=0;
        for(j=0;j<i;j++){
            wt[i]+=bt[j];
        }
    }
    for(i=0;i<n;i++)
    {
        tat[i]=wt[i]+bt[i];
        awt+=wt[i];
        atat+=tat[i];
    }
    printf("Process\t\tBurst Time\tPriority\t Waiting Time\tTurn Around Time\n");
    for(i=0;i<n;i++)
    {
        printf("P[%d]\t\t%d\t\t%d\t\t%d\t\t%d\n",p[i],bt[i],pt[i],wt[i],tat[i]);
    }
    awt/=n;
    atat/=n;
    printf("\nAvarage Waiting Time: %f\n", awt);
    printf("Avarage Turnaround Time: %f", atat);
    return 0;
}



Round Robin:
#include<stdio.h>  
#include<conio.h>  
  
void main()  
{  
    // initlialize the variable name  
    int i, NOP, sum=0,count=0, y, quant, wt=0, tat=0, at[10], bt[10], temp[10];  
    float avg_wt, avg_tat;  
    printf(" Total number of process in the system: ");  
    scanf("%d", &NOP);  
    y = NOP; // Assign the number of process to variable y  
  
// Use for loop to enter the details of the process like Arrival time and the Burst Time  
for(i=0; i<NOP; i++)  
{  
printf("\n Enter the Arrival and Burst time of the Process[%d]\n", i+1);  
printf(" Arrival time is: \t");  // Accept arrival time  
scanf("%d", &at[i]);  
printf(" \nBurst time is: \t"); // Accept the Burst time  
scanf("%d", &bt[i]);  
temp[i] = bt[i]; // store the burst time in temp array  
}  
// Accept the Time qunat  
printf("Enter the Time Quantum for the process: \t");  
scanf("%d", &quant);  
// Display the process No, burst time, Turn Around Time and the waiting time  
printf("\n Process No \t\t Burst Time \t\t TAT \t\t Waiting Time ");  
for(sum=0, i = 0; y!=0; )  
{  
if(temp[i] <= quant && temp[i] > 0) // define the conditions   
{  
    sum = sum + temp[i];  
    temp[i] = 0;  
    count=1;  
    }     
    else if(temp[i] > 0)  
    {  
        temp[i] = temp[i] - quant;  
        sum = sum + quant;    
    }  
    if(temp[i]==0 && count==1)  
    {  
        y--; //decrement the process no.  
        printf("\nProcess No[%d] \t\t %d\t\t\t\t %d\t\t\t %d", i+1, bt[i], sum-at[i], sum-at[i]-bt[i]);  
        wt = wt+sum-at[i]-bt[i];  
        tat = tat+sum-at[i];  
        count =0;     
    }  
    if(i==NOP-1)  
    {  
        i=0;  
    }  
    else if(at[i+1]<=sum)  
    {  
        i++;  
    }  
    else  
    {  
        i=0;  
    }  
}  
// represents the average waiting time and Turn Around time  
avg_wt = wt * 1.0/NOP;  
avg_tat = tat * 1.0/NOP;  
printf("\n Average Turn Around Time: \t%f", avg_wt);  
printf("\n Average Waiting Time: \t%f", avg_tat);  
getch();  
}  
